function documentNamespace(namespace) {
    return {
        'require':function(what) {
            var split = what.split('.'),
                retval = window;
            for(var i = 0, len = split.length; i < len; ++i) {
                retval = retval[split[i]];
            }
            return retval;
        },
        'getExporter':function(name) {
            if(!name) {
                return function(export_name, to_export) { 
                    window[namespace][export_name] = to_export;
                };
            }
            window[namespace][name] = (window[namespace][name] === undefined) ? {} : window[namespace][name];
            return function(export_name, to_export) {
                window[namespace][name][export_name] = to_export;
            };
        }
    };
}

function commonjsNamespace(namespace, exp) {
    exp.require = function(what) {
        var regex = new RegExp("^" + namespace),
            retval,
            rest,
            parts;
        if(regex.test(what)) {
            return require(['./',what].join(''));
        } else {
            parts = what.split('.');
            rest = parts.slice(1);
            retval = require(parts[0]);
            for(var i = 0, len = rest.length; i < len; ++i) {
                retval = retval[rest[i]];
            }
            return retval;
        }
    };
    exp.getExporter = function(name) {
        var self = this;
        return function(export_name, to_export) {
            self[export_name] = to_export;
        };
    };
    return exp;
}

function get_global_object(namespace, exp) {
    if(exp) {
        return commonjsNamespace(namespace, exp);
    }

    if(window[namespace]) {
        return window[namespace];
    } else {
        window[namespace] = documentNamespace(namespace);
        return window[namespace];
    }
}
try {
    exports.get_global_object = get_global_object;
} catch(Error) {}

var get_global_object, exp=null;
try {
    exp = exports;
    get_global_object = require('./namespace').get_global_object;
} catch(Error) {}

(function (global) {
    var exporter = global.getExporter('fields');

    var Field = function (model, name, kwargs) {
        this.model = model;
        this.name = name;
        if(kwargs) {
            this.nullable = kwargs.nullable ? true : false;
            this.blank = kwargs.blank ? true : false;
            this.default_value = kwargs.default_value;
            this.validators = kwargs.validators ? kwargs.validators : [];
            this.db_index = kwargs.db_index;
            this.primary_key = kwargs.primary_key;
        } else {
            this.nullable = false;
            this.blank = false;
            this.validators = [];
        }
        this.original_kwargs = kwargs;
    };

    Field.prototype.validate = function(value) {
        for(var i = 0, len = this.validators.length; i < len; ++i) {
            this.validators[i].apply(this, [value]);
        }
        return true;
    };

    Field.prototype.getPrepLookup = function(value, type) {
        return value;
    };

    Field.prototype.getLookupValue = function(value, type, backend) {
        var backendField = this.getBackendField(backend);
        return backendField.getLookupValue(
            this.getPrepLookup(value, type), type
        );
    };

    Field.prototype.jsToBackendValue = function(backend, value) {
        if(value === undefined) {
            value = this.default_value;
            if(value instanceof Function) {
                value = value();
            }
        }
        if(this.validate(value)) {
            return this.getBackendField(backend).jsToLocal(value);
        }
    };

    Field.prototype.backendToJSValue = function(backend, value) {
        return this.getBackendField(backend).localToJS(value);
    };

    Field.prototype.getBackendField = function(backend) {
        try {
            return new backend.fields[this.backendFieldName](this.original_kwargs);
        } catch(err) {
            throw new Error(this.backendFieldName + " is not supported by this backend.");
        }
    };

    var IntegerField = function(model, name, kwargs) {
        Field.apply(this, [model, name, kwargs]);

        this.backendFieldName = 'IntegerField';
    };
    IntegerField.prototype = new Field();
    IntegerField.prototype.constructor = PositiveIntegerField;

    var PositiveIntegerField = function(model, name, kwargs) {
        var validators = kwargs.validators ? kwargs.validators : [];
        validators.push(function(value) {
            if(parseInt(value, 10) < 0) {
                throw new Error("Value must be greater than zero");
            }
        });
        kwargs.validators = validators;
        IntegerField.apply(this, [model, name, kwargs]);
    };
    PositiveIntegerField.prototype = new Field();
    PositiveIntegerField.prototype.constructor = PositiveIntegerField;

    var CharField = function (model, name, kwargs) {
        this.max_length = kwargs.max_length;
        var validators = kwargs.validators ? kwargs.validators : [];
        validators.push(function(value) {
            if(value.length > this.max_length) {
                throw new Error("Value is longer than field's max_length");
            }
        });
        kwargs.validators = validators;
        this.backendFieldName = 'CharField';
        Field.apply(this, [model, name, kwargs]);
    };
    CharField.prototype = new Field();
    CharField.prototype.constructor = CharField;

    var TextField = function(model, name, kwargs) {
        Field.apply(this, [model, name, kwargs]);
        this.backendFieldName = 'TextField';
    }; 
    TextField.prototype = new Field();
    TextField.prototype.constructor = TextField;

    var BooleanField = function(kwargs) {
        Field.apply(this, [kwargs]);
        this.backendFieldName = 'BooleanField';
    };
    BooleanField.prototype = new Field();
    BooleanField.prototype.constructor = BooleanField();
    

    var DateTimeField = function(model, name, kwargs) {
        var validators = kwargs.validators ? kwargs.validators : [];
        validators.push(function(value) {
            if(!value instanceof Date) {
                throw new Error("Value must be an instance of Date");
            }
        });
        kwargs.validators = validators;
        
        this.backendFieldName = 'DateTimeField';

        Field.apply(this, [model, name, kwargs]);
    };
    DateTimeField.prototype = new Field();
    DateTimeField.prototype.constructor = DateTimeField;
    DateTimeField.prototype.getPrepLookup = function(value, type) {
        switch(type) {
            case 'year': return value.getFullYear();
            case 'month': return value.getMonth();
            case 'day': return value.getDate();
            case 'hour': return value.getHours();
            case 'minute': return value.getMinutes();
            case 'second': return value.getSeconds();
            case 'range': return [this.jsToLocal(value[0]), this.jsToLocal(value[1])];
        }
        return value;
    };

    var AutoField = function(kwargs) {
        kwargs.nullable = false;
        Field.apply(this, [kwargs]);
        this.backendFieldName = 'AutoField';
    };
    AutoField.prototype = new Field();
    AutoField.prototype.constructor = AutoField;

    var ManyToOneRelFactory = function(one_to_many) {
        this.one_to_many = one_to_many;
    };

    ManyToOneRelFactory.prototype.instantiate = function(instance) {
        return new ManyToOneRel(instance, this.one_to_many);
    };

    var ManyToOneRel = function(instance, forward_relation) {
        this.instance = instance;
        this.forward_relation = forward_relation;
    };

    ManyToOneRel.prototype.getQuerySet = function() {
        var filter = {};
        filter[this.forward_relation.from_field.name] = this.instance;
        return this.forward_relation.from_field.model.objects.filter(filter);
    };

    ManyToOneRel.prototype.all = function(callback) {
        this.getQuerySet().all(callback);
    };

    ManyToOneRel.prototype.each = function(callback) {
        this.getQuerySet().each(callback);
    };

    ManyToOneRel.prototype.filter = function(kwargs) {
        return this.getQuerySet().filter(kwargs);
    };

    var OneToManyRel = function(from_field, to_model, related_name) {
        this.from_field = from_field;
        this.to_model = to_model;
        this.related_name = related_name;
    };

    OneToManyRel.prototype.contribToClass = function() {
        this.to_model.prototype[this.related_name] = new ManyToOneRelFactory(this);
    };

    var ForeignKey = function(model, name, to, kwargs) {
        Field.apply(this, [model, name, kwargs]);
        var rel_class = kwargs.rel_class ? kwargs.rel_class : OneToManyRel; 
        this.rel = new rel_class(this, to, kwargs.related_name);
        this.rel.contribToClass();
        this.backendFieldName = 'ForeignKey';
    };
    ForeignKey.prototype = new Field();
    ForeignKey.prototype.constructor = ForeignKey;
    ForeignKey.prototype.getBackendField = function(backend) {
        return new backend.fields.ForeignKey(this.rel, this.original_kwargs);
    };


    var ManyToMany = function(model, to, kwargs) {

    };

    var define = function(field_class) {
        return function(kwargs) {
            var retval = function(model, name) {
                return new field_class(model, name, kwargs);
            };
            retval.isField = true;
            return retval;
        };
    };

    exporter('Field', Field);
    exporter('ManyToOneRelFactory', ManyToOneRelFactory);
    exporter('IntegerField', define(IntegerField));
    exporter('PositiveIntegerField', define(PositiveIntegerField));
    exporter('DateTimeField', define(DateTimeField));
    exporter('CharField', define(CharField));
    exporter('TextField', define(TextField));
    exporter('BooleanField', define(BooleanField));
    exporter('AutoField', define(AutoField));
    exporter('ForeignKey', (function() {
        return function(to, kwargs) {
            var retval = function(model, name) {
                return new ForeignKey(model, name, to, kwargs);
            };
            retval.isField = true;
            return retval;
        };
    })());

})(get_global_object('pieshop', exp));

var get_global_object, exp=null;
try { 
    exp = exports;
    get_global_object = require('./namespace').get_global_object;
} catch(Error) {}

(function (global) {
    var registry = {},
        values = {},
        exporter = global.getExporter('settings');

    var set_addon = function(name, target) {
        registry[name] = target;
    };

    var set_value = function(name, target) {
        values[name] = target;
    }; 

    var get_value = function(name) {
        return values[name];
    };

    var get_addon = function(name) {
        var target_string = registry[name],
            target_file_and_object = target_string.split(':'),
            target_file = global.require(target_file_and_object[0]),
            target_object_parts = target_file_and_object[1] !== undefined ? target_file_and_object[1].split(':') : [],
            result = target_file;
        for(var i = 0, len = target_object_parts.length; i < len; ++i) {
            result = result[target_object_parts[i]];
        }
        return result;
    };

    exporter('get_value', get_value);
    exporter('set_value', set_value); 
    exporter('get_addon', get_addon);
    exporter('set_addon', set_addon); 
})(get_global_object('pieshop', exp));

var get_global_object, exp=null;
try {
    exp = exports;
    get_global_object = require('./namespace').get_global_object;
} catch(Error) {}

(function (global) {
    var exporter = global.getExporter('backends');
    var CompiledQuery = function(backend, data, resource_uri, resourceCallback) {
        this.backend = backend;
        this.data = data;
        this.resource_uri = resource_uri;
        this.resourceCallback = resourceCallback;
    };
    var dict_copy = function(x) { for(var i in x) { if (x.hasOwnProperty(i)) { this[i] = x[i]; } } };

    var TastyPieBackend = function () {};

    TastyPieBackend.prototype.build_resources = function(data, resource_type) {
        var objects = [];
        for(var i = 0, len = data.objects.length; i < len; ++i) {
            for(var field_name in data.objects[i]) if(data.objects[i].hasOwnProperty(field_name)) {
                var field = resource_type.prototype._meta.get_field_by_name(field_name);
                if(field) {
                    data.objects[i][field_name] = field.backendToJSValue(this, data.objects[i][field_name]);
                }
            }
            objects.push(new resource_type(data.objects[i]));
        }
        return objects;
    };

    TastyPieBackend.prototype.compile_delete = function(query) {
        var q = this.compile_get(query);
        return new CompiledQuery(this, q.values, q.resource_uri, function(callback) {
            return function(data) {
                callback(data);
            };
        });
    };

    TastyPieBackend.prototype.compile_put = function(query) {
        var values = {},
            resource_uri = query.instance ? query.instance.resource_uri : query.resource.prototype._meta.opts.resource_uri
;
        for(var name in query.resource.prototype._meta.fields) {
            var field = query.resource.prototype._meta.fields[name],
                val = field.jsToBackendValue(this, query._values[name]);
            values[name] = val;
            if((val === undefined || val === null) && !field.nullable) {
                throw new Error("Field "+name+" cannot be null!");
            }
        }
        return new CompiledQuery(this, JSON.stringify({'objects':[values]}), resource_uri, function (callback) {
            var backend = this.backend;
            return function(data) {
                var resources = backend.build_resources(data);
                callback(resources[0]);
            };        
        });
    };

    TastyPieBackend.prototype.compile_post = function(query) {
        var q = this.compile_get(query);
        return new CompiledQuery(this, q.data, q.resource_uri, function(callback) {
            return q.resourceCallback(function(objects) {
                var i = 0,
                    len = objects.length,
                    results = [],
                    recurse = function() {
                        if(i < len) {
                            try {
                                var curObj = objects[i++];
                                for(var name in query._values) if(query._values.hasOwnProperty(name)) {
                                    curObj[name] = query._values[name];
                                }
                                curObj.save(function(obj, err) {
                                    if(err) {
                                        callback(results, err);
                                    } else {
                                        results.push(obj);
                                        recurse();
                                    }
                                });
                            } catch(err) {
                                callback(results, err);
                            }
                        } else {
                            callback(results, err);
                        }
                    };
                recurse();
            }); 
        }); 
    };

    TastyPieBackend.prototype.compile_get = function(query) {
        var data = {
            'format':'json'
        }; 
        if(query._limit) {
            data.limit = query._limit;
        }
        if(query._offset) {
            data.offset = query._offset;
        }
        if(query._order_by) {
            if(query._order_by instanceof Array) {
                data.sort_by = query._order_by[0];      // only sort by the primary value.
            } else {
                data.sort_by = query._order_by;
            }
        }
        var resource_uri = query.resource.prototype._meta.opts.resource_uri;

        for(var i in query._filters) if(query._filters.hasOwnProperty(i)) {
            var split = i.split('__'),
                field_name = split[0],
                joins = split.slice(1, -1),
                last = split.slice(-1)[0],
                filter_type = last === field_name ? 'exact' : last,
                original_value = query._filters[i],
                field = query.resource.prototype._meta.get_field_by_name(i),
                value = original_value;

            if(field_name === 'pk') {
                if(filter_type === 'exact') {
                    resource_uri += value + '/'; 
                } else {
                    var resource_uri_split = resource_uri.split('/').slice(0,-1);
                    value = (value.length > 0 ? value : [value]).join(';');
                    resource_uri_split.push('set');
                    resource_uri_split.push(value);
                    resource_uri = resource_uri_split.join('/') + '/';
                }
            } else {
                if(field) {
                    value = field.getLookupValue(value, type, this);
                }
                data[i] = value;
            }
        }
        return new CompiledQuery(this, data, resource_uri, function(callback) {
            var backend = this.backend;
            return function(data) {
                var resources = backend.build_resources(data, query.resource);
                callback(resources);
            };
        });
    };

    var CharField = function(kwargs) {};
    CharField.prototype.jsToLocal = function(value) {
        return value;
    };
    CharField.prototype.localToJS = function(value) {
        return value;
    };
    CharField.prototype.getLookupValue = function(value, type) {
        return value;
    };
    var TextField = CharField;

    var AutoField = function(kwargs) {};
    AutoField.prototype.jsToLocal = function(value) {
        return parseInt(value, 10);
    };
    AutoField.prototype.localToJS = function(value) {
        return parseInt(value, 10);
    };
    AutoField.prototype.getLookupValue = function(value, type) {
        return parseInt(value, 10);
    };


    var IntegerField = function(kwargs) {};
    IntegerField.prototype.jsToLocal = function(value) {
        return parseInt(value, 10);
    };
    IntegerField.prototype.localToJS = function(value) {
        return parseInt(value, 10);
    };
    IntegerField.prototype.getLookupValue = function(value, type) {
        return parseInt(value, 10);
    };

    var DateTimeField = function(kwargs) {};
    DateTimeField.prototype.jsToLocal = function(value) {
        var pad = function(num) { 
            return num < 10 ? '0'+num : String(num);
        };
        return [value.getFullYear(), pad(value.getMonth()), pad(value.getDate())].join('-') + ' ' +
        [pad(value.getHours()), pad(value.getMinutes()), pad(value.getSeconds())].join(':'); 
    };

    DateTimeField.prototype.localToJS = function(value) {
        return new Date(Date.parse(value));
    };

    DateTimeField.prototype.getLookupValue = function(value, type) {
        return value;
    };

    TastyPieBackend.prototype.fields = {
        AutoField:AutoField,
        CharField:CharField,
        TextField:TextField,
        IntegerField:IntegerField,
        DateTimeField:DateTimeField
    };

    TastyPieBackend.prototype.compile = function(query) {
        return this['compile_'+query.method.toLowerCase()](query);
    };

    exporter('CompiledQuery', CompiledQuery);
    exporter('TastyPieBackend', new TastyPieBackend());
})(get_global_object('pieshop', exp));

var get_global_object, exp=null;
try {
    exp = exports;
    get_global_object = require('./namespace').get_global_object;
} catch(Error) {}

(function (global) {
    var exporter = global.getExporter('transports');
    var jQueryAjaxTransport = function () {};
    jQueryAjaxTransport.prototype.perform = function(method, resource, compiled_query, callback) {
        jQuery.ajax({
            'url':compiled_query.resource_uri,
            'data':compiled_query.data,
            'processData':method === 'GET' || method === 'DELETE',
            'type':method,
            'contentType':'application/json',
            'traditional':true,
            'dataType':'json',
            'success':compiled_query.resourceCallback(callback),
            'error':function(xhr, status_code, err) {
                callback([], err);
            },
        });
    };

    var nodeJsHttpClientTransport = function () {};
    nodeJsHttpClientTransport.prototype.perform = function(method, resource, compiled_query, callback) {
        var settings = global.require('pieshop.settings'),
            http = require('http'),
            querystring = require('querystring'),
            hostname = resource.prototype.hostname,
            hostport = resource.prototype.port ? resource.prototype.port : 80,
            client = http.createClient(hostport, hostname),
            data = querystring.stringify(compiled_query.data),
            uri = [compiled_query.resource_uri, data].join('?'),
            request = client.request(method, uri, {
                'host':hostname,
            });
        request.end();
        request.addListener('response', function (response) {
            response.setEncoding('utf8');
            response.addListener('data', function(chunk) {
                var resources = compiled_query.backend.build_resources(JSON.parse(chunk), resource);
                callback(resources);
            });
        }); 
    };

    exporter('jQueryAjaxTransport', new jQueryAjaxTransport());
    exporter('nodeJsHttpClientTransport', new nodeJsHttpClientTransport());
})(get_global_object('pieshop', exp));


var get_global_object, exp=null;
try {
    exp = exports;
    get_global_object = require('./namespace').get_global_object;
} catch(Error) {}

(function (global) {
    var exporter = global.getExporter(),
        settings = global.require('pieshop.settings'),
        Query;

    var dict_copy = function(params, filter) {
        var accept = filter ? filter : function(){return true;};

        for(var i in params) {
            if(params.hasOwnProperty(i) && accept(i)) {
                this[i] = params[i];
            }
        }
    };

    var Manager = function(model) {
        this.model = model;
    };
    Manager.prototype.all = function(callback) {
        this.getQuery().all(callback);
    };

    Manager.prototype.filter = function(kwargs) {
        return this.getQuery().filter(kwargs);
    };

    Manager.prototype.each = function(callback) {
        this.getQuery().each(callback);
    };

    Manager.prototype.create = function(kwargs, callback) {
        return this.getQuery().create(kwargs, callback);
    };

    Manager.prototype.getQuery = function() {
        var query = new Query(this.model),
            opts = this.model.prototype._meta;
        if(opts.order_by) {
            query = query.copy({'_order_by':opts.ordering});
        }
        return query;
    };

    var ResourceMeta = function(primary_key, fields, opts) {
        this.primary_key = primary_key;
        this.fields = fields;
        this.ordering = opts.ordering;
        this.opts = opts;
    };

    ResourceMeta.prototype.get_field_by_name = function(name) {
        if(name === 'pk') {
            return this.primary_key;
        }
        return this.fields[name];
    };

    var resource_factory = function(opts) {
        var fields = global.require('pieshop.fields'),
            Resource = function (data) {
                for(var i in this) {
                    if(this[i] instanceof fields.ManyToOneRelFactory) {
                        this[i] = this[i].instantiate(this);
                    }
                }
                for(var field_name in data) if (data.hasOwnProperty(field_name)) {
                    this[field_name] = data[field_name];
                }
            },
            ResourceProto = {
                'save':function(callback) {
                    return new Query(Resource).save(this);
                },
                'erase':function(callback) {
                    return new Query(Resource).filter({'pk':this.pk}).erase(cb);
                }
            },
            model_fields = {},
            metaclass_opts = {},
            primary_key = null;

        var build_model_fields = function(attribute) {
            if(opts[attribute].isField) {
                model_fields[attribute] = opts[attribute](Resource, attribute);
                if(model_fields[attribute].primary_key) {
                    primary_key = model_fields[attribute];
                }
                return false; 
            } else if (attribute === 'Meta') {
                metaclass_opts = opts[attribute];
                return false;
            }
            return true;
        };

        dict_copy.call(ResourceProto, opts, build_model_fields);

        if(!primary_key) {
            primary_key = model_fields['id'] = new (fields.AutoField({'primary_key':true}))(Resource, 'id');
        }

        ResourceProto._meta = new ResourceMeta(primary_key, model_fields, metaclass_opts);

        Resource._default_manager = new Manager(Resource);
        if(!Resource.objects) {
            Resource.objects = Resource._default_manager;
        }

        Resource.prototype = ResourceProto;
        Resource.prototype.constructor = Resource;
        return Resource;
    };

    Query = function(Resource) {    // this was forward declared at the top, hence the lack of 'var'
        this.resource = Resource;
        this.method = 'GET';
        this.transport = arguments.length > 1 ? arguments[1] : settings.get_addon('transport');
        this.backend = arguments.length > 2 ? arguments[2] : settings.get_addon('backend');
    };

    Query.prototype = {
        'copy': function(params) {
            var new_query = new Query(this.resource);
            dict_copy.call(new_query, this);
            dict_copy.call(new_query, params);
            return new_query;
        },
        'order_by': function(ordering) {
            var copy = this.copy({'_order_by':ordering});
            return copy;
        },
        'limit': function(limit) {
            var copy = this.copy({'_limit': limit});
            return copy;
        },
        'offset': function(offset) {
            var copy = this.copy({'_offset': offset});
            return copy;
        },
        'filter': function(params) {
            var new_params = (this._filters) ? this._filters : {};
            dict_copy.call(new_params, params);
            return this.copy({'_filters':new_params});
        },
        'slice': function() {
            if(arguments.length > 0) {
                if(arguments.length === 1) {
                    return this.limit(parseInt(arguments[0], 10));
                }
                return this.offset(parseInt(arguments[0], 10)).limit(parseInt(arguments[1], 10));
            }
            return this.copy();
        },
        // commenting this out until tests are written
        'erase': function(callback) {
            var query = this.copy({'method': 'DELETE'}),
                backend = this.resource.backend === undefined ? this.backend : this.resource.backend,
                transport = this.resource.transport === undefined ? this.transport : this.resource.transport,
                compiled_query = backend.compile(query);
            transport.perform(query.method, query.resource, compiled_query, callback);
        },
        'create': function(kwargs, callback) {
            var query = this.copy({'method': 'PUT', '_values':kwargs}),
                backend = this.resource.backend === undefined ? this.backend : this.resource.backend,
                transport = this.resource.transport === undefined ? this.transport : this.resource.transport,
                compiled_query = backend.compile(query);
            transport.perform(query.method, query.resource, compiled_query, callback);
        },
        'save':function(instance, callback) {
            var data = {},
                backend = this.resource.backend === undefined ? this.backend : this.resource.backend,
                transport = this.resource.transport === undefined ? this.transport : this.resource.transport;
            for(var name in instance._meta.fields) {
                var field = instance._meta.fields[name],
                    value = field.jsToBackendValue(backend, instance[name]);
                if((value === null || value === undefined) && !field.nullable) {
                    throw new Error("Field "+name+" cannot be null!");
                }
                data[name] = value;
            }
            var query = this.copy({'method':'PUT', '_values':data, 'instance':instance}),
                compiled_query = backend.compile(query);
            transport.perform(query.method, query.resource, compiled_query, callback); 
        },
        'update': function(kwargs, callback) {
            var query = this.copy({'method': 'POST', '_values':kwargs}),
                backend = this.resource.backend === undefined ? this.backend : this.resource.backend,
                transport = this.resource.transport === undefined ? this.transport : this.resource.transport,
                compiled_query = backend.compile(query);
            transport.perform(query.method, query.resource, compiled_query, callback);
        },
        'all': function(callback) {
            if(callback !== undefined) {
                var query = this.copy({'method': 'GET'}),
                    backend = this.resource.backend === undefined ? this.backend : this.resource.backend,
                    transport = this.resource.transport === undefined ? this.transport : this.resource.transport,
                    compiled_query = backend.compile(query);
                transport.perform(query.method, query.resource, compiled_query, callback);
            } else {
                var self = this;
                return function(callback) {
                    self.all(callback);
                };
            }
        },
        'each': function(callback) {
            this.all(function(objects) {
                for (var i = 0, len = objects.length; i < len; ++i) {
                    callback.apply(objects[i], [objects[i]]);
                }
            });
        }
    };

    exporter('Query', Query);
    exporter('resource', resource_factory);
    exporter('query', function (Resource) { return new Query(Resource); });
})(get_global_object('pieshop', exp));
pieshop.settings.set_addon('backend', 'pieshop.backends:TastyPieBackend');
pieshop.settings.set_addon('transport', 'pieshop.transports:jQueryAjaxTransport');
